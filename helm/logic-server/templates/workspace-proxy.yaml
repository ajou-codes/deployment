apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ws-proxy
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    certmanager.k8s.io/acme-challenge-type: dns01
    certmanager.k8s.io/acme-dns01-provider: route53
    konghq.com/https-redirect-status-code: "308"
    konghq.com/protocols: https
    konghq.com/strip-path: "true"
spec:
  ingressClassName: kong
  tls:
    - secretName: workspace.ajou.codes
      hosts:
        - "*.workspace.ajou.codes"
  rules:
    - host: '*.workspace.ajou.codes'
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: ws-proxy
                port:
                  number: 80
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-conf
data:
  nginx.conf: |
    user  nginx;
    worker_processes  1;
    error_log  /var/log/nginx/error.log warn;
    pid        /var/run/nginx.pid;
    events {
        worker_connections  1024;
    }
    http {
      include       /etc/nginx/mime.types;
      default_type  application/octet-stream;
      log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for"';
      access_log  /var/log/nginx/access.log  main;
      sendfile        on;
      keepalive_timeout  65;

      server {
        listen 80;
    
        location /health-check {
          return 200;
        }
      }
    
      # Workspace Port Forwarded
      server {
        listen 80;

        server_name ~^(?<workspace_port>[0-9]{2,5})-(?<workspace_id>.*?)\.workspace\.;
        resolver kube-dns.kube-system.svc.cluster.local valid=5s;

        location / {
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection "Upgrade";
          proxy_set_header X-Workspace-Id $workspace_id;
          proxy_set_header X-Workspace-Port $workspace_port;
          proxy_pass http://workspace-proxy.workspace.svc.cluster.local;
          proxy_set_header Host $host;
          proxy_http_version 1.1;
        }
      }
    
      # Workspace IDE
      server {
        listen 80;

        server_name ~^(?<workspace_id>.*?)\.workspace\.;
        resolver kube-dns.kube-system.svc.cluster.local valid=5s;

        location / {
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection "Upgrade";
          proxy_set_header X-Workspace-Id $workspace_id;
          proxy_pass http://workspace-proxy.workspace.svc.cluster.local;
          proxy_set_header Host $host;
          proxy_http_version 1.1;
        }
      }
    }
---
kind: Service
apiVersion: v1
metadata:
  name: ws-proxy
spec:
  selector:
    app: ws-proxy
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
      name: http
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ws-proxy
  labels:
    app: ws-proxy
spec:
  selector:
    matchLabels:
      app: ws-proxy
  replicas: 1
  template:
    metadata:
      labels:
        app: ws-proxy
    spec:
      containers:
        - name: nginx
          image: nginx:alpine
          ports:
            - containerPort: 80
          volumeMounts:
            - name: nginx-config
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
      volumes:
        - name: nginx-config
          configMap:
            name: nginx-conf
---
apiVersion: v1
kind: Namespace
metadata:
  name: workspace
---
kind: Service
apiVersion: v1
metadata:
  namespace: workspace
  name: workspace-proxy
spec:
  selector:
    app: workspace-proxy
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 8000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: workspace
  name: workspace-proxy-deployment
  labels:
    app: workspace-proxy
spec:
  serviceAccountName: workspace-proxy-account
  automountServiceAccountToken: true
  replicas: 1
  selector:
    matchLabels:
      app: workspace-proxy
  template:
    metadata:
      labels:
        app: workspace-proxy
    spec:
      containers:
        - name: workspace-proxy
          image: localhost:32000/workspace-proxy:0a87bda
          ports:
            - name: http
              containerPort: 8000
              protocol: TCP
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: workspace-proxy-account
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: workspace-proxy
rules:
  - apiGroups: ['*']
    resources: ['pods']
    verbs: ['*']
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: workspace-proxy
subjects:
  - kind: ServiceAccount
    name: workspace-proxy-account
roleRef:
  kind: Role
  name: workspace-proxy
  apiGroup: rbac.authorization.k8s.io
